basePath: /
consumes:
- application/json
definitions:
  Content:
    description: Content is a complement of the messages structure, since it contains
      all the possible types
    properties:
      id:
        description: |-
          content identification. autogenerated by the database
          gorm.Model
        example: 1
        format: int64
        type: integer
        x-go-name: ContentID
      image:
        $ref: '#/definitions/Image'
      text:
        $ref: '#/definitions/Text'
      type:
        type: string
        x-go-name: Type
      video:
        $ref: '#/definitions/Video'
    type: object
    x-go-package: github.com/challenge/pkg/models
  Image:
    description: Image type
    properties:
      height:
        format: int64
        type: integer
        x-go-name: Height
      id:
        format: int64
        type: integer
        x-go-name: ImageID
      url:
        type: string
        x-go-name: Url
      width:
        format: int64
        type: integer
        x-go-name: Width
    type: object
    x-go-package: github.com/challenge/pkg/models
  Login:
    description: Login represents the information of the logged user
    properties:
      id:
        description: User ID of the user who logged in.
        example: 1
        format: int64
        type: integer
        x-go-name: Id
      token:
        description: Authentication token to use for API calls on behalf of this user.
        example: Bearer token
        type: string
        x-go-name: Token
    type: object
    x-go-package: github.com/challenge/pkg/models
  Message:
    description: Message represents the main structure of the sent messages
    properties:
      content:
        $ref: '#/definitions/Content'
      id:
        description: |-
          messages identification. autogenerated by the database
          gorm.Model
        example: 1
        format: int64
        type: integer
        x-go-name: MessageID
      recipient:
        description: User ID of recipient.
        example: 2
        format: int64
        type: integer
        x-go-name: Recipient
      sender:
        description: User ID of sender
        example: 1
        format: int64
        type: integer
        x-go-name: UserID
      timestamp:
        description: messages timestamp in UTC to avoid time-zones problems
        format: date-time
        type: string
        x-go-name: Timestamp
    type: object
    x-go-package: github.com/challenge/pkg/models
  MessageFilter:
    description: MessageFilter represents the filter to search messages
    properties:
      limit:
        description: Limit the response to this many messages.
        example: 100
        format: int64
        type: integer
        x-go-name: Limit
      recipient:
        description: User ID of recipient.
        example: 1
        format: int64
        type: integer
        x-go-name: Recipient
      start:
        description: Starting message ID. Messages will be returned in increasing
          order of message ID, starting from this value (or the next lowest value
          stored in the database).
        example: 1
        format: int64
        type: integer
        x-go-name: Start
    type: object
    x-go-package: github.com/challenge/pkg/models
  MessageResponse:
    description: MessageResponse represents the response when inserting a new message
    properties:
      id:
        description: Message IDs are required to be unique and increase over time;
          they may or may not be sequential.
        example: 1
        format: int64
        type: integer
        x-go-name: MessageID
      timestamp:
        description: |-
          Timestamp for this message, as recorded on the server.
          example "2019-09-03T19:54:22Z"
        format: date-time
        type: string
        x-go-name: Timestamp
    type: object
    x-go-package: github.com/challenge/pkg/models
  ModelError:
    description: ModelError
    properties:
      code:
        description: Error code
        type: string
        x-go-name: Code
      message:
        type: string
        x-go-name: Message
    type: object
    x-go-package: github.com/challenge/pkg/models
  Text:
    description: Text type
    properties:
      id:
        format: int64
        type: integer
        x-go-name: TextID
      text:
        type: string
        x-go-name: Text
    type: object
    x-go-package: github.com/challenge/pkg/models
  User:
    description: User represents the user for this application
    properties:
      password:
        description: user password
        example: password
        type: string
        x-go-name: Password
      username:
        description: user identification. must be unique
        example: test_user
        type: string
        x-go-name: Username
    type: object
    x-go-package: github.com/challenge/pkg/models
  UserResponsee:
    description: User represents identification of the created user
    properties:
      id:
        description: |-
          User ID of the newly created user.
          gorm.Model
        example: 1
        format: int64
        type: integer
        x-go-name: UserID
    type: object
    x-go-package: github.com/challenge/pkg/models
  Video:
    description: Video type
    properties:
      id:
        format: int64
        type: integer
        x-go-name: VideoID
      source:
        type: string
        x-go-name: Source
      url:
        type: string
        x-go-name: Url
    type: object
    x-go-package: github.com/challenge/pkg/models
host: 0.0.0.0:8080
info:
  description: Basic security and persistence solution for a chat API
  title: Chat API backend.
  version: 1.0.0
paths:
  /login:
    post:
      description: Log in as an existing user.
      operationId: Login
      parameters:
      - description: User Information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User'
      produces:
      - application/json
      responses:
        "200":
          description: Token Information
          schema:
            items:
              $ref: '#/definitions/Login'
            type: array
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/ModelError'
            type: array
        "409":
          description: User does not exist
          schema:
            items:
              $ref: '#/definitions/ModelError'
            type: array
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/ModelError'
            type: array
      summary: Login
  /messages:
    get:
      description: Fetch all existing messages to a given recipient, within a range
        of message IDs.
      operationId: GetMessages
      parameters:
      - description: User ID of recipient.
        in: query
        name: recipient
        required: true
        type: string
      - description: Starting message ID. Messages will be returned in increasing
          order of message ID, starting from this value (or the next lowest value
          stored in the database).
        in: query
        name: start
        required: true
        type: string
      - description: Limit the response to this many messages.
        in: query
        name: limit
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Messages
          schema:
            items:
              $ref: '#/definitions/Message'
            type: array
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/ModelError'
            type: array
        "404":
          description: Records not found
          schema:
            items:
              $ref: '#/definitions/ModelError'
            type: array
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/ModelError'
            type: array
      summary: Get Messages
    post:
      description: Send a message from one user to another.
      operationId: SendMessage
      parameters:
      - description: Message Information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/Message'
      produces:
      - application/json
      responses:
        "201":
          description: Message Information
          schema:
            items:
              $ref: '#/definitions/MessageResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/ModelError'
            type: array
        "409":
          description: Sender or recipient doesn't exist
          schema:
            items:
              $ref: '#/definitions/ModelError'
            type: array
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/ModelError'
            type: array
      summary: Send a new message
  /users:
    post:
      description: Create a user in the system.
      operationId: CreateUser
      parameters:
      - description: User Information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/User'
      produces:
      - application/json
      responses:
        "201":
          description: User Information
          schema:
            items:
              $ref: '#/definitions/UserResponsee'
            type: array
        "400":
          description: Bad Request
          schema:
            items:
              $ref: '#/definitions/ModelError'
            type: array
        "409":
          description: User already exists
          schema:
            items:
              $ref: '#/definitions/ModelError'
            type: array
        "500":
          description: Internal Server Error
          schema:
            items:
              $ref: '#/definitions/ModelError'
            type: array
      summary: Add a new user
produces:
- application/json
schemes:
- http
swagger: "2.0"
